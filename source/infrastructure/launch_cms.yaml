---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template for AWS IoT for Automotive Cloud9 Instance.  Bootstraps the Cloud9 instance to prepare for IoT Workshops
Parameters:
  AWSIoTC9InstanceType:
    Description: AWS IoT for Automotive Cloud9 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - m5.large
    ConstraintDescription: Must be a valid Cloud9 instance type
  AWSIoTC9InstanceVolumeSize: 
    Type: Number
    Description: The Size in GB of the Cloud9 Instance Volume. 
    Default: 25
  CMSAdminEmail: 
    Type: String
    Description: The email address of the CMS Administrator
    AllowedPattern: '[^@]+@[^@]+\.[^@]+'

Resources:
################## PERMISSIONS AND ROLES #################
  AWSIoTC9Role:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Environment
          Value: AWS IoT for Automotive
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ssm.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess
      Path: "/"

  AWSIoTC9LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName:
          Fn::Join:
          - ''
          - - AWSIoTC9LambdaPolicy-
            - Ref: AWS::Region
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStackResource
            - cloudformation:DescribeStackResources
            - ec2:DescribeInstances
            - ec2:DescribeIamInstanceProfileAssociations
            - ec2:AssociateIamInstanceProfile
            - ec2:ModifyInstanceAttribute
            - ec2:ReplaceIamInstanceProfileAssociation
            - iam:ListInstanceProfiles
            - iam:PassRole
            Resource: "*"

################## LAMBDA BOOTSTRAP FUNCTION ################

  AWSIoTC9BootstrapInstanceLambda:
    Description: Bootstrap Cloud9 instance
    Type: Custom::AWSIoTC9BootstrapInstanceLambda
    DependsOn:
    - AWSIoTC9BootstrapInstanceLambdaFunction
    - AWSIoTC9Instance
    - AWSIoTC9InstanceProfile
    - AWSIoTC9LambdaExecutionRole
    Properties:
      Tags:
        - Key: Environment
          Value: AWS IoT for Automotive
      ServiceToken:
        Fn::GetAtt:
        - AWSIoTC9BootstrapInstanceLambdaFunction
        - Arn
      REGION:
        Ref: AWS::Region
      StackName:
        Ref: AWS::StackName
      EnvironmentId:
        Ref: AWSIoTC9Instance
      LabIdeInstanceProfileName:
        Ref: AWSIoTC9InstanceProfile
      LabIdeInstanceProfileArn:
        Fn::GetAtt:
        - AWSIoTC9InstanceProfile
        - Arn

  AWSIoTC9BootstrapInstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: Environment
          Value: AWS IoT for Automotive
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - AWSIoTC9LambdaExecutionRole
        - Arn
      Runtime: python3.9
      MemorySize: 256
      Timeout: '600'
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          
          def lambda_handler(event, context):
              # logger.info('event: {}'.format(event))
              # logger.info('context: {}'.format(context))
              responseData = {}

              if event['RequestType'] == 'Delete':
                  responseData = {'Success': 'Delete started for instance'}
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'CustomResourcePhysicalID')

              if event['RequestType'] == 'Create':
                  try:
                      region = os.environ['AWS_REGION']
                      # Open AWS clients
                      ec2 = boto3.client('ec2', region)
          
                      # Get the InstanceId of the Cloud9 IDE
                      instance = ec2.describe_instances(Filters=[{'Name': 'tag:Name','Values': ['aws-cloud9-'+event['ResourceProperties']['StackName']+'-'+event['ResourceProperties']['EnvironmentId']]}])['Reservations'][0]['Instances'][0]
                      # logger.info('instance: {}'.format(instance))
          
                      # Create the IamInstanceProfile request object
                      iam_instance_profile = {
                          'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn'],
                          'Name': event['ResourceProperties']['LabIdeInstanceProfileName']
                      }
                      # logger.info('iam_instance_profile: {}'.format(iam_instance_profile))
                      # Wait for Instance to become ready before adding Role
                      instance_state = instance['State']['Name']
                      while instance_state != 'running':
                          time.sleep(5)
                          instance_state = ec2.describe_instances(InstanceIds=[instance['InstanceId']])
                          # logger.info('instance_state: {}'.format(instance_state))
          
                      # attach instance profile
                      try:
                        response = ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance['InstanceId'])
                      except:
                        instanceId =instance['InstanceId']
                        response = ec2.describe_iam_instance_profile_associations(Filters=[{'Name':'instance-id','Values': [instanceId] }])
                        while response['IamInstanceProfileAssociations'][0]['State'] != 'associated':
                          response = ec2.describe_iam_instance_profile_associations(Filters=[{'Name':'instance-id','Values':[instanceId]}])
                        response = ec2.replace_iam_instance_profile_association(
                          IamInstanceProfile=iam_instance_profile,
                          AssociationId=response['IamInstanceProfileAssociations'][0]['AssociationId']
                        )
  
                      responseData = {'Success': 'Started bootstrapping for instance: '+instance['InstanceId']}
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'CustomResourcePhysicalID')
                      return
                  except Exception as e:
                      print('exception!')
                      print(str(e))
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData, 'CustomResourcePhysicalID')
################## SSM BOOTSRAP HANDLER ###############
  AWSIoTC9OutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

  AWSIoTC9SSMDocument: 
    Type: AWS::SSM::Document
    Properties: 
      Tags:
        - Key: Environment
          Value: AWS IoT for Automotive
      Content: Yaml
      DocumentType: Command
      Content: 
        schemaVersion: '2.2'
        description: Bootstrap Cloud9 Instance
        mainSteps:
        - action: aws:runShellScript
          name: "AWSIoTC9bootstrapS1"
          nextStep: "AWSIoTC9bootstrapS2"
          inputs:
            timeoutSeconds: '700'
            runCommand:
            - "#!/bin/bash"
            - date
            - echo LANG=en_US.utf-8 >> /etc/environment
            - echo LC_ALL=en_US.UTF-8 >> /etc/environment
            - . /home/ec2-user/.bashrc
            - sudo yum update -y
            - yum -y install aws-cli jq strace tree gcc glibc-static gettext bash-completion
            - echo '=== INSTALL and CONFIGURE default software components ==='   
            - sudo amazon-linux-extras install -y python3.8
            - PATH=$PATH:/usr/bin
            - !Sub SIZE=${AWSIoTC9InstanceVolumeSize}
            - !Sub REGION=${AWS::Region}
            - |
              INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
              VOLUMEID=$(aws ec2 describe-instances \
                --instance-id $INSTANCEID \
                --query "Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId" \
                --output text --region $REGION)
              aws ec2 modify-volume --volume-id $VOLUMEID --size $SIZE --region $REGION
              while [ \
                "$(aws ec2 describe-volumes-modifications \
                  --volume-id $VOLUMEID \
                  --filters Name=modification-state,Values="optimizing","completed" \
                  --query "length(VolumesModifications)"\
                  --output text --region $REGION)" != "1" ]; do
              sleep 1
              done
              sudo growpart /dev/nvme0n1 1              
              sudo xfs_growfs -d /

        - action: "aws:runShellScript"
          name: "AWSIoTC9bootstrapS2" 
          nextStep: "AWSIoTC9bootstrapS3"
          inputs:
            timeoutSeconds: '3048'
            runCommand:
            - "#!/bin/bash"
            - . /home/ec2-user/.bashrc
            - export HOME=/home/ec2-user/
            - echo '=== CONFIGURE default python version ==='
            - alternatives --set python /usr/bin/python3.8
            - echo '=== INSTALL and CONFIGURE default software components ==='
            - sudo -H -u ec2-user bash -c "pip3 install --no-warn-script-location --user -U boto boto3 botocore awscli aws-sam-cli"
            - echo '=== Clone the CDF & CMS repositories ===' 
            - git clone -b 1.0.5 https://github.com/aws/aws-connected-device-framework.git /home/ec2-user/environment/aws-connected-device-framework/
            - git clone -b develop https://github.com/aws-solutions/aws-connected-mobility-solution.git /home/ec2-user/environment/aws-connected-mobility-solution/
            - cd /home/ec2-user/environment/aws-connected-device-framework/source
            - echo '=== INSTALL Node + Rush  ===' 
            - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
            - . /home/ec2-user/.bashrc
            - . /home/ec2-user/.nvm/nvm.sh --no-use && nvm install 14
            - chown -R ec2-user:ec2-user /home/ec2-user/*
        - action: "aws:runShellScript"
          name: "AWSIoTC9bootstrapS3"
          nextStep: "AWSIoTC9bootstrapS4"
          inputs:
            timeoutSeconds: '3048'
            runCommand:
            - "#!/bin/bash"
            - export HOME=/home/ec2-user/
            - . /home/ec2-user/.bashrc
            - cd /home/ec2-user/environment/aws-connected-device-framework/source
            - wget --no-check-certificate --content-disposition https://raw.githubusercontent.com/aws-solutions/aws-connected-mobility-solution/develop/source/common/config/neptune.patch
            - wget --no-check-certificate --content-disposition https://raw.githubusercontent.com/aws-solutions/aws-connected-mobility-solution/develop/source/common/config/neptune2.patch
            - . /home/ec2-user/.bashrc 
            - git apply < /home/ec2-user/environment/aws-connected-device-framework/source/neptune.patch
            - patch -p1 < /home/ec2-user/environment/aws-connected-device-framework/source/neptune2.patch
            - cd /home/ec2-user/environment/aws-connected-device-framework/source/packages/services/provisioning/src/config
            - wget --no-check-certificate --content-disposition https://raw.githubusercontent.com/aws-solutions/aws-connected-mobility-solution/develop/source/common/config/provisioning.patch
            - git apply provisioning.patch
            - cd /home/ec2-user/environment/aws-connected-device-framework/source
            - . /home/ec2-user/.nvm/nvm.sh --no-use && nvm install 14
            - node common/scripts/install-run-rush.js install
        - action: "aws:runShellScript"
          name: "AWSIoTC9bootstrapS4"
          nextStep: "AWSIoTC9bootstrapS5"
          inputs:
            timeoutSeconds: '3048'
            runCommand:
            - "#!/bin/bash"
            - export HOME=/home/ec2-user/
            - . /home/ec2-user/.bashrc
            - cd /home/ec2-user/environment/aws-connected-device-framework/source
            - . /home/ec2-user/.nvm/nvm.sh --no-use && nvm install 14
            - node common/scripts/install-run-rush.js bundle
            - chown -R ec2-user:ec2-user /home/ec2-user/*
        - action: "aws:runShellScript"
          name: "AWSIoTC9bootstrapS5"
          nextStep: "AWSIoTC9bootstrapS6"        
          inputs:
            timeoutSeconds: '3048'
            runCommand:
            - "#!/bin/bash"
            - . /home/ec2-user/.bashrc
            - !Sub export REGION=${AWS::Region}
            - export ENV_NAME=development
            - export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
            - export rand=$RANDOM
            - export CMS_BUCKET_NAME=cms-$rand-$ENV_NAME-$AWS_ACCOUNT_ID
            - aws s3 mb s3://$CMS_BUCKET_NAME --region $REGION
            - export KEYPAIR_NAME=cdfBa-$rand-dev-key
            - rm -f /home/ec2-user/.ssh/$KEYPAIR_NAME.pem
            - aws ec2 create-key-pair --key-name $KEYPAIR_NAME --query 'KeyMaterial' --output text >/home/ec2-user/.ssh/$KEYPAIR_NAME.pem --region $REGION
            - chmod 400 /home/ec2-user/.ssh/$KEYPAIR_NAME.pem
            - echo '=== BUILD & DEPLOY CDF  ==='
            - cd /home/ec2-user/environment/aws-connected-device-framework/source
            - ./infrastructure/deploy-core-single-stack.bash -e $ENV_NAME -b $CMS_BUCKET_NAME -p $KEYPAIR_NAME -y s3://$CMS_BUCKET_NAME/template-snippets/ -i 0.0.0.0/0 -Y -B -R $REGION
            - chown -R ec2-user:ec2-user /home/ec2-user/*
        - action: "aws:runShellScript"
          name: "AWSIoTC9bootstrapS6"
          nextStep: "AWSIoTC9bootstrapS7" 
          inputs:
            timeoutSeconds: '3048'
            runCommand:
            - "#!/bin/bash"
            - export HOME=/home/ec2-user/
            - rm -rf /home/ec2-user/node_modules
            - . /home/ec2-user/.bashrc
            - cd /home/ec2-user/environment/aws-connected-mobility-solution/source
            - . /home/ec2-user/.nvm/nvm.sh --no-use && nvm install 14
            - node common/scripts/install-run-rush.js install  
            - chown -R ec2-user:ec2-user /home/ec2-user/*
        - action: "aws:runShellScript"
          name: "AWSIoTC9bootstrapS7"
          nextStep: "AWSIoTC9bootstrapS8"
          inputs:
            timeoutSeconds: '3048'
            runCommand:
            - "#!/bin/bash"
            - export HOME=/home/ec2-user/
            - export LC_ALL=en_US.utf-8
            - export LANG=en_US.utf-8
            - rm -rf /home/ec2-user/node_modules
            - !Sub export AWS_DEFAULT_REGION=${AWS::Region}
            - . /home/ec2-user/.bashrc
            - echo '=== BUILD CMS  ==='
            - PATH=/root/.local/bin:$PATH
            - cd /home/ec2-user/environment/aws-connected-mobility-solution/source
            - . /home/ec2-user/.nvm/nvm.sh --no-use && nvm install 14
            - node common/scripts/install-run-rush.js bundle
            - chown -R ec2-user:ec2-user /home/ec2-user/*
        - action: "aws:runShellScript"
          name: "AWSIoTC9bootstrapS8"
          isEnd: true
          inputs:
            timeoutSeconds: '3048'
            runCommand:
            - "#!/bin/bash"
            - . /home/ec2-user/.bashrc
            - !Sub export AWS_DEFAULT_REGION=${AWS::Region}
            - !Sub export REGION=${AWS::Region}
            - !Sub export CMS_ADMIN_EMAIL=${CMSAdminEmail}
            - export ENV_NAME=development
            - export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
            - export KEY_ID=$(aws kms create-key --description "CMS KMS Test Key" --query KeyMetadata.KeyId --output text)
            - echo '=== DEPLOY CMS  ==='
            - cd /home/ec2-user/environment/aws-connected-mobility-solution/source
            - chmod 777 infrastructure/deploy.bash
            - ./infrastructure/deploy.bash -e $ENV_NAME -l $ENV_NAME -b $CMS_BUCKET_NAME -h $CMS_ADMIN_EMAIL -k $KEY_ID -b $CMS_BUCKET_NAME -Y -B -R $REGION
            - chown -R ec2-user:ec2-user /home/ec2-user/*
  AWSIoTC9BootstrapAssociation: 
    Type: AWS::SSM::Association
    DependsOn: AWSIoTC9OutputBucket 
    Properties: 
      Name: !Ref AWSIoTC9SSMDocument
      OutputLocation: 
        S3Location:
          OutputS3BucketName: !Ref AWSIoTC9OutputBucket
          OutputS3KeyPrefix: bootstrapoutput
      Targets:
        - Key: tag:SSMBootstrap
          Values:
          - Active

################## INSTANCE #####################
  AWSIoTC9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: AWSIoTC9Role

  AWSIoTC9Instance:
    Description: "-"
    DependsOn: AWSIoTC9BootstrapAssociation
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: AWS Cloud9 instance for AWS IoT for Automotive
      AutomaticStopTimeMinutes: 3600
      ImageId: resolve:ssm:/aws/service/cloud9/amis/amazonlinux-2-x86_64
      InstanceType:
        Ref: AWSIoTC9InstanceType
      Name:
        Ref: AWS::StackName
      Tags: 
        - 
          Key: SSMBootstrap
          Value: Active
        - 
          Key: Environment
          Value: AWS IoT for Automotive

Outputs: 
  Cloud9IDE:
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: AWS::Region
        - ".console.aws.amazon.com/cloud9/ide/"
        - Ref: AWSIoTC9Instance
        - "?region="
        - Ref: AWS::Region

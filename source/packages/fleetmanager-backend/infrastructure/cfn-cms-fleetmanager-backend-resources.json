{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CMS - Fleetmanager Backend",
  "Transform": "AWS::Serverless-2016-10-31",
  "Parameters": {
    "AssetLibraryFunctionName": {
      "Type": "String",
      "Description": "AssetLibrary Service API Function Name"
    },
    "CDFSecurityGroupId": {
      "Type": "String",
      "Description": "CDF Security Groups"
    },
    "CognitoUserPoolArn": {
      "Type": "String",
      "Description": "Cognito User Pool Arn"
    },
    "CommandsFunctionName": {
      "Type": "String",
      "Description": "Commands Service API Function Name"
    },
    "EnableApiGatewayAccessLogs": {
      "Description": "Enables API gateway Access Logging, defaults to false if not specified.",
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "true",
        "false"
      ],
      "MinLength": 1
    },
    "Environment": {
      "Type": "String",
      "Default": "dev",
      "Description": "Environment prefix identifier for resources to be deployed as'dev', 'test' or 'prod'"
    },
    "PrivateSubnetIds": {
      "Type": "CommaDelimitedList",
      "Description": "CDF Private Subnets"
    },
    "ProjectName": {
      "Type": "String",
      "Default": "cdf_auto_fleetmanager",
      "Description": "IoT Rule prefix identifier for resouces to be deployed"
    },
    "ProjectPrefix": {
      "Type": "String",
      "Default": "cms",
      "Description": "Prefix added to resource names to identify"
    },
    "VehicleAnomalyTableStreamArn": {
      "Type": "String",
      "Description": "Reference to CVRA ddb table for vehicle anomaly data"
    },
    "VpcId": {
      "Type": "String",
      "Description": "Vpc Id for deploying resources within a VPC"
    },
    "KmsKeyId": {
      "Type": "String",
      "Description": "Kms Key Id"
    }
  },
  "Conditions" : {
    "DeployInVPC" : { "Fn::Not": [{"Fn::Equals" : [{"Ref" : "VpcId"}, "N/A"]}] },
    "EnableApiGatewayAccessLogs": {"Fn::Equals": [{"Ref": "EnableApiGatewayAccessLogs"}, "true"]
    }
  },
  "Resources": {
    "ApiGatewayAccessLogGroup": {
      "Condition": "EnableApiGatewayAccessLogs",
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "cms-fleetmanagerbackend-apigatewayaccesslogs-${Environment}"
        }
      }
    },
    "ESSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {
        "cfn_nag": {
            "rules_to_suppress": [
              {
                  "id": "W9",
                  "reason": "Changed the CIDR group to /32 from /0."
              }
            ]
          }
       },
      "Condition": "DeployInVPC",
      "Properties": {
        "GroupDescription": "Allow HTTPs inbound traffic and all outbound access",
        "Tags": [
          {
            "Key": "Name",
            "Value": "ESSecurityGroup"
          }
        ],
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "Description": "ingress traffic on port 443 from vpc cidr blocker",
            "CidrIp": "10.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "Description": "egress traffic on port 443 from vpc cidr blocker",
            "CidrIp": "10.0.0.0/0"
          }
        ]
      }
    },
    "LambdaLayer": {
      "Type": "AWS::Serverless::LayerVersion",
      "Properties": {
        "Description": "Contains dependencies boto, requests, request_aws4auth, etc.",
        "ContentUri": "../../src/zipped/python.zip",
        "CompatibleRuntimes": [
          "python3.7"
        ],
        "RetentionPolicy": "Delete"
      }
    },
    "ESResource": {
      "Type": "AWS::Elasticsearch::Domain",
      "Metadata": {
          "cfn_nag": {
             "rules_to_suppress": [
                {
                   "id": "W28",
                   "reason": "There is no explicit name here, domain name is driven by user paramaters - ProjectPrefix and Environment."
                }
             ]
          }
       },
      "Properties": {
        "DomainName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "ProjectPrefix"
              },
              "es",
              {
                "Ref": "Environment"
              }
            ]
          ]
        },
        "ElasticsearchVersion": "7.1",
        "ElasticsearchClusterConfig": {
          "DedicatedMasterCount" : 3,
          "DedicatedMasterEnabled" : true,
          "DedicatedMasterType" : "t3.small.elasticsearch",
          "InstanceType": "t3.medium.elasticsearch",
          "InstanceCount": 2,
          "ZoneAwarenessEnabled": true,
          "ZoneAwarenessConfig": {
            "AvailabilityZoneCount" : 2
          }
        },
        "EBSOptions": {
          "EBSEnabled": true,
          "VolumeSize": 10,
          "VolumeType": "gp2"
        },
        "NodeToNodeEncryptionOptions": {
          "Enabled": true
        },
        "EncryptionAtRestOptions" : {
          "Enabled": true
        },
        "AccessPolicies": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${LambdaESRole}"
                }
              },
              "Action": [
                "es:ESHttp*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${AnomalyDataESRole}"
                }
              },
              "Action": [
                "es:ESHttp*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${IoTEventJobConfigRole}"
                }
              },
              "Action": [
                "es:ESHttp*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${AddIndexMappingsESRole}"
                }
              },
              "Action": [
                "es:ESHttp*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${EventRuleRole}"
                }
              },
              "Action": [
                "es:ESHttp*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${DtcRuleRole}"
                }
              },
              "Action": [
                "es:ESHttp*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${TripsRuleRole}"
                }
              },
              "Action": [
                "es:ESHttp*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${TelemetryRuleRole}"
                }
              },
              "Action": [
                "es:ESHttp*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${OtaRuleRole}"
                }
              },
              "Action": [
                "es:ESHttp*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${GroupEventRole}"
                }
              },
              "Action": [
                "es:ESHttp*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${DeviceEventRole}"
                }
              },
              "Action": [
                "es:ESHttp*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                }
              ]
            }
          ]
        },
        "VPCOptions": {
          "Fn::If": [
            "DeployInVPC",
            {
              "SecurityGroupIds": [
                {
                  "Ref": "ESSecurityGroup"
                }
              ],
              "SubnetIds": {
                "Ref": "PrivateSubnetIds"
              }
            },
            {"Ref" : "AWS::NoValue"}
          ]
        }
      }
    },
    "LambdaESRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "lambda:Invoke*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CommandsFunctionName}"
                    },
                    {
                      "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AssetLibraryFunctionName}"
                    }
                  ]
                },
                {
                  "Action": [
                    "ssm:GetParameter",
                    "ssm:PutParameter"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                    "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/mapboxToken"
                    }
                  ]
                },
                {
                  "Action": [
                    "ssm:DescribeParameters"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "iot:DescribeJobExecution",
                    "iot:ListJobs",
                    "iot:ListJobExecutionsForJob"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "es:ESHttp*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "lambda-es-policy"
                ]
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AWSLambdaExecute",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ]
      }
    },
    "AnomalyDataESRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "kms:GenerateDataKey",
                    "kms:Decrypt"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}"
                  }
                },
                {
                  "Action": [
                    "es:ESHttp*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                    }
                  ]
                },
                {
                  "Sid": "APIAccessForDynamoDBStreams",
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": {
                    "Ref": "VehicleAnomalyTableStreamArn"
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "lambda-es-policy"
                ]
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AWSLambdaExecute",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ]
      }
    },
    "IoTEventJobConfigRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "iot:UpdateEventConfigurations"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "es:ESHttp*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "lambda-es-policy"
                ]
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AWSLambdaExecute",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ]
      }
    },
    "AddIndexMappingsESRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "es:ESHttp*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "lambda-es-policy"
                ]
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AWSLambdaExecute",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ]
      }
    },
    "EventRuleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "es:ESHttp*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "lambda-es-policy"
                ]
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AWSLambdaExecute",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ]
      }
    },
    "DtcRuleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "es:ESHttp*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "lambda-es-policy"
                ]
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AWSLambdaExecute",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ]
      }
    },
    "TripsRuleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "es:ESHttp*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "lambda-es-policy"
                ]
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AWSLambdaExecute",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ]
      }
    },
    "TelemetryRuleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "es:ESHttp*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "lambda-es-policy"
                ]
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AWSLambdaExecute",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ]
      }
    },
    "OtaRuleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "es:ESHttp*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "lambda-es-policy"
                ]
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AWSLambdaExecute",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ]
      }
    },
    "GroupEventRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "es:ESHttp*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "lambda-es-policy"
                ]
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AWSLambdaExecute",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ]
      }
    },
    "DeviceEventRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "es:ESHttp*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*"
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "lambda-es-policy"
                ]
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AWSLambdaExecute",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ]
      }
    },

    "DeviceEventPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "DeviceEvent"
        },
        "Principal": "iot.amazonaws.com"
      }
    },
    "DeviceEvent": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "../../build/cdf_auto_fleetmanager_device_events.zip",
        "Handler": {
          "Fn::Sub": "${ProjectName}_device_events.lambda_handler"
        },
        "Role": {
          "Fn::GetAtt": [
            "DeviceEventRole",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "ES_ENDPOINT": {
              "Fn::Sub": [
                "https://${ESDomain}/",
                {
                  "ESDomain": {
                    "Fn::GetAtt": [
                      "ESResource",
                      "DomainEndpoint"
                    ]
                  }
                }
              ]
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        },
        "Layers": [
          {
            "Ref": "LambdaLayer"
          }
        ],
        "VpcConfig": {
          "Fn::If": [
            "DeployInVPC",
            {
              "SecurityGroupIds": [
                {
                  "Ref": "ESSecurityGroup"
                }
              ],
              "SubnetIds": {
                "Ref": "PrivateSubnetIds"
              }
            },
            {"Ref" : "AWS::NoValue"}
          ]
        }
      }
    },
    "GroupEventPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "GroupEvent"
        },
        "Principal": "iot.amazonaws.com"
      }
    },
    "GroupEvent": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "../../build/cdf_auto_fleetmanager_groups_events.zip",
        "Handler": {
          "Fn::Sub": "${ProjectName}_groups_events.lambda_handler"
        },
        "Role": {
          "Fn::GetAtt": [
            "GroupEventRole",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "ES_ENDPOINT": {
              "Fn::Sub": [
                "https://${ESDomain}/",
                {
                  "ESDomain": {
                    "Fn::GetAtt": [
                      "ESResource",
                      "DomainEndpoint"
                    ]
                  }
                }
              ]
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        },
        "Layers": [
          {
            "Ref": "LambdaLayer"
          }
        ],
        "VpcConfig": {
          "Fn::If": [
            "DeployInVPC",
            {
              "SecurityGroupIds": [
                {
                  "Ref": "ESSecurityGroup"
                }
              ],
              "SubnetIds": {
                "Ref": "PrivateSubnetIds"
              }
            },
            {"Ref" : "AWS::NoValue"}
          ]
        }
      }
    },
    "OtaRulePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "OtaRule"
        },
        "Principal": "iot.amazonaws.com"
      }
    },
    "OtaRule": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "../../build/cdf_auto_fleetmanager_ota_rule.zip",
        "Handler": {
          "Fn::Sub": "${ProjectName}_ota_rule.lambda_handler"
        },
        "Role": {
          "Fn::GetAtt": [
            "OtaRuleRole",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "ES_ENDPOINT": {
              "Fn::Sub": [
                "https://${ESDomain}/",
                {
                  "ESDomain": {
                    "Fn::GetAtt": [
                      "ESResource",
                      "DomainEndpoint"
                    ]
                  }
                }
              ]
            },
            "ASSET_LIBRARY_FUNCTION_NAME": {
              "Ref": "AssetLibraryFunctionName"
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        },
        "Layers": [
          {
            "Ref": "LambdaLayer"
          }
        ],
        "VpcConfig": {
          "Fn::If": [
            "DeployInVPC",
            {
              "SecurityGroupIds": [
                {
                  "Ref": "ESSecurityGroup"
                }
              ],
              "SubnetIds": {
                "Ref": "PrivateSubnetIds"
              }
            },
            {"Ref" : "AWS::NoValue"}
          ]
        }
      }
    },
    "TelemetryRulePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "TelemetryRule"
        },
        "Principal": "iot.amazonaws.com"
      }
    },
    "TelemetryRule": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "../../build/cdf_auto_fleetmanager_telemetry_rule.zip",
        "Handler": {
          "Fn::Sub": "${ProjectName}_telemetry_rule.lambda_handler"
        },
        "Role": {
          "Fn::GetAtt": [
            "TelemetryRuleRole",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "ES_ENDPOINT": {
              "Fn::Sub": [
                "https://${ESDomain}/",
                {
                  "ESDomain": {
                    "Fn::GetAtt": [
                      "ESResource",
                      "DomainEndpoint"
                    ]
                  }
                }
              ]
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        },
        "Layers": [
          {
            "Ref": "LambdaLayer"
          }
        ],
        "VpcConfig": {
          "Fn::If": [
            "DeployInVPC",
            {
              "SecurityGroupIds": [
                {
                  "Ref": "ESSecurityGroup"
                }
              ],
              "SubnetIds": {
                "Ref": "PrivateSubnetIds"
              }
            },
            {"Ref" : "AWS::NoValue"}
          ]
        }
      }
    },
    "TripsRulePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "TripsRule"
        },
        "Principal": "iot.amazonaws.com"
      }
    },
    "TripsRule": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "../../build/cdf_auto_fleetmanager_trips_rule.zip",
        "Handler": {
          "Fn::Sub": "${ProjectName}_trips_rule.lambda_handler"
        },
        "Role": {
          "Fn::GetAtt": [
            "TripsRuleRole",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "ES_ENDPOINT": {
              "Fn::Sub": [
                "https://${ESDomain}/",
                {
                  "ESDomain": {
                    "Fn::GetAtt": [
                      "ESResource",
                      "DomainEndpoint"
                    ]
                  }
                }
              ]
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        },
        "Layers": [
          {
            "Ref": "LambdaLayer"
          }
        ],
        "VpcConfig": {
          "Fn::If": [
            "DeployInVPC",
            {
              "SecurityGroupIds": [
                {
                  "Ref": "ESSecurityGroup"
                }
              ],
              "SubnetIds": {
                "Ref": "PrivateSubnetIds"
              }
            },
            {"Ref" : "AWS::NoValue"}
          ]
        }
      }
    },
    "DtcRulePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "DtcRule"
        },
        "Principal": "iot.amazonaws.com"
      }
    },
    "DtcRule": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "../../build/cdf_auto_fleetmanager_dtc_rule.zip",
        "Handler": {
          "Fn::Sub": "${ProjectName}_dtc_rule.lambda_handler"
        },
        "Role": {
          "Fn::GetAtt": [
            "DtcRuleRole",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "ES_ENDPOINT": {
              "Fn::Sub": [
                "https://${ESDomain}/",
                {
                  "ESDomain": {
                    "Fn::GetAtt": [
                      "ESResource",
                      "DomainEndpoint"
                    ]
                  }
                }
              ]
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        },
        "Layers": [
          {
            "Ref": "LambdaLayer"
          }
        ],
        "VpcConfig": {
          "Fn::If": [
            "DeployInVPC",
            {
              "SecurityGroupIds": [
                {
                  "Ref": "ESSecurityGroup"
                }
              ],
              "SubnetIds": {
                "Ref": "PrivateSubnetIds"
              }
            },
            {"Ref" : "AWS::NoValue"}
          ]
        }
      }
    },
    "EventRulePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "EventRule"
        },
        "Principal": "iot.amazonaws.com"
      }
    },
    "EventRule": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "../../build/cdf_auto_fleetmanager_event_rule.zip",
        "Handler": {
          "Fn::Sub": "${ProjectName}_event_rule.lambda_handler"
        },
        "Role": {
          "Fn::GetAtt": [
            "EventRuleRole",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "ES_ENDPOINT": {
              "Fn::Sub": [
                "https://${ESDomain}/",
                {
                  "ESDomain": {
                    "Fn::GetAtt": [
                      "ESResource",
                      "DomainEndpoint"
                    ]
                  }
                }
              ]
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        },
        "Layers": [
          {
            "Ref": "LambdaLayer"
          }
        ],
        "VpcConfig": {
          "Fn::If": [
            "DeployInVPC",
            {
              "SecurityGroupIds": [
                {
                  "Ref": "ESSecurityGroup"
                }
              ],
              "SubnetIds": {
                "Ref": "PrivateSubnetIds"
              }
            },
            {"Ref" : "AWS::NoValue"}
          ]
        }
      }
    },
    "EventDeviceRule": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "RuleName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "ProjectName"
              },
              "assetlibrary_event_device"
            ]
          ]
        },
        "TopicRulePayload": {
          "AwsIotSqlVersion": "2016-03-23",
          "Description": "Passes device provision data to AWS IoT",
          "RuleDisabled": false,
          "Sql": "SELECT * FROM 'cdf/assetlibrary/events/devices/#'",
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {
                  "Fn::GetAtt": [
                    "DeviceEvent",
                    "Arn"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "EventGroupRule": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "RuleName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "ProjectName"
              },
              "assetlibrary_event_group"
            ]
          ]
        },
        "TopicRulePayload": {
          "AwsIotSqlVersion": "2016-03-23",
          "Description": "Passes vehicle data associated with device to AWS IoT",
          "RuleDisabled": false,
          "Sql": "SELECT * FROM 'cdf/assetlibrary/events/groups/#'",
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {
                  "Fn::GetAtt": [
                    "GroupEvent",
                    "Arn"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "OtaDataRule": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "RuleName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "ProjectName"
              },
              "iot_ota_data"
            ]
          ]
        },
        "TopicRulePayload": {
          "AwsIotSqlVersion": "2016-03-23",
          "Description": "Passes ota data to AWS IoT",
          "RuleDisabled": false,
          "Sql": "SELECT * FROM '$aws/events/jobExecution/#'",
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {
                  "Fn::GetAtt": [
                    "OtaRule",
                    "Arn"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "CarDataRule": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "RuleName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "ProjectName"
              },
              "iot_car_data"
            ]
          ]
        },
        "TopicRulePayload": {
          "AwsIotSqlVersion": "2016-03-23",
          "Description": "Passes telemtry data to AWS IoT",
          "RuleDisabled": false,
          "Sql": "SELECT * FROM 'dt/cvra/+/cardata'",
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {
                  "Fn::GetAtt": [
                    "TelemetryRule",
                    "Arn"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "TripDataRule": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "RuleName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "ProjectName"
              },
              "iot_trip_data"
            ]
          ]
        },
        "TopicRulePayload": {
          "AwsIotSqlVersion": "2016-03-23",
          "Description": "Passes trip data to AWS IoT",
          "RuleDisabled": false,
          "Sql": "SELECT * FROM 'dt/cvra/+/trip'",
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {
                  "Fn::GetAtt": [
                    "TripsRule",
                    "Arn"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "DtcDataRule": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "RuleName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "ProjectName"
              },
              "iot_dtc_data"
            ]
          ]
        },
        "TopicRulePayload": {
          "AwsIotSqlVersion": "2016-03-23",
          "Description": "Passes dtc data to AWS IoT",
          "RuleDisabled": false,
          "Sql": "SELECT * FROM 'dt/cvra/+/dtc'",
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {
                  "Fn::GetAtt": [
                    "DtcRule",
                    "Arn"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "EventDataRule": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "RuleName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "ProjectName"
              },
              "iot_event_data"
            ]
          ]
        },
        "TopicRulePayload": {
          "AwsIotSqlVersion": "2016-03-23",
          "Description": "Passes event data to AWS IoT",
          "RuleDisabled": false,
          "Sql": "SELECT * FROM 'dt/cvra/+/event'",
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {
                  "Fn::GetAtt": [
                    "EventRule",
                    "Arn"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "AddIndexMappingsES": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "../../build/cdf_auto_fleetmanager_elasticsearch_helper.zip",
        "Handler": {
          "Fn::Sub": "${ProjectName}_elasticsearch_helper.lambda_handler"
        },
        "Environment": {
          "Variables": {
            "ES_ENDPOINT": {
              "Fn::GetAtt": [
                "ESResource",
                "DomainEndpoint"
              ]
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "AddIndexMappingsESRole",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 12,
        "Layers": [
          {
            "Ref": "LambdaLayer"
          }
        ],
        "VpcConfig": {
          "Fn::If": [
            "DeployInVPC",
            {
              "SecurityGroupIds": [
                {
                  "Ref": "ESSecurityGroup"
                }
              ],
              "SubnetIds": {
                "Ref": "PrivateSubnetIds"
              }
            },
            {"Ref" : "AWS::NoValue"}
          ]
        }
      }
    },
    "AddIndexMappingsESInvoke": {
      "Type": "Custom::AddIndexMappingsES",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "AddIndexMappingsES",
            "Arn"
          ]
        }
      }
    },
    "IotEventJobConfig": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "../../build/cdf_auto_fleetmanager_iot_event_config.zip",
        "Handler": {
          "Fn::Sub": "${ProjectName}_iot_event_config.lambda_handler"
        },
        "Role": {
          "Fn::GetAtt": [
            "IoTEventJobConfigRole",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 12,
        "Layers": [
          {
            "Ref": "LambdaLayer"
          }
        ],
        "VpcConfig": {
          "Fn::If": [
            "DeployInVPC",
            {
              "SecurityGroupIds": [
                {
                  "Ref": "ESSecurityGroup"
                }
              ],
              "SubnetIds": {
                "Ref": "PrivateSubnetIds"
              }
            },
            {"Ref" : "AWS::NoValue"}
          ]
        }
      }
    },
    "IotEventJobConfigInvoke": {
      "Type": "Custom::IotEventJobConfig",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "IotEventJobConfig",
            "Arn"
          ]
        }
      }
    },
    "AnomalyDataESPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "AnomalyDataES"
        },
        "Principal": "lambda.amazonaws.com"
      }
    },
    "AnomalyDataES": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "../../build/cdf_auto_fleetmanager_anomaly_ddb_es.zip",
        "Handler": {
          "Fn::Sub": "${ProjectName}_anomaly_ddb_es.lambda_handler"
        },
        "Environment": {
          "Variables": {
            "ES_ENDPOINT": {
              "Fn::Sub": [
                "https://${ESDomain}/",
                {
                  "ESDomain": {
                    "Fn::GetAtt": [
                      "ESResource",
                      "DomainEndpoint"
                    ]
                  }
                }
              ]
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "AnomalyDataESRole",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 30,
        "Layers": [
          {
            "Ref": "LambdaLayer"
          }
        ],
        "VpcConfig": {
          "Fn::If": [
            "DeployInVPC",
            {
              "SecurityGroupIds": [
                {
                  "Ref": "ESSecurityGroup"
                }
              ],
              "SubnetIds": {
                "Ref": "PrivateSubnetIds"
              }
            },
            {"Ref" : "AWS::NoValue"}
          ]
        }
      }
    },
    "DataTableStream": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "BatchSize": 1,
        "Enabled": true,
        "EventSourceArn": {
          "Ref": "VehicleAnomalyTableStreamArn"
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "AnomalyDataES",
            "Arn"
          ]
        },
        "StartingPosition": "LATEST"
      }
    },
    "APIHandler": {
      "Properties": {
        "Role": {
          "Fn::GetAtt": [
            "LambdaESRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "ES_ENDPOINT": {
              "Fn::Sub": [
                "https://${ESDomain}",
                {
                  "ESDomain": {
                    "Fn::GetAtt": [
                      "ESResource",
                      "DomainEndpoint"
                    ]
                  }
                }
              ]
            },
            "COMMANDS_FUNCTION_NAME": {
              "Ref": "CommandsFunctionName"
            },
            "REGION": {
              "Ref": "AWS::Region"
            }
          }
        },
        "VpcConfig": {
          "Fn::If": [
            "DeployInVPC",
            {
              "SecurityGroupIds": [
                {
                  "Ref": "ESSecurityGroup"
                }
              ],
              "SubnetIds": {
                "Ref": "PrivateSubnetIds"
              }
            },
            {"Ref" : "AWS::NoValue"}
          ]
        }
      }
    },
    "RestAPI": {
      "Properties": {
        "AccessLogSetting": {
          "Fn::If": [
            "EnableApiGatewayAccessLogs",
            {
              "DestinationArn": {
                "Fn::GetAtt": [
                  "ApiGatewayAccessLogGroup",
                  "Arn"
                ]
              },
              "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] \"$context.httpMethod $context.resourcePath $context.protocol\" $context.status $context.responseLength $context.requestId"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "FleetmanagerApiGatewayUrl": {
      "Value": {
        "Fn::Sub": "https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod"
      }
    },
    "FleetmanagerApiGatewayHost": {
      "Value": {
        "Fn::Sub": "${RestAPI}.execute-api.${AWS::Region}.amazonaws.com"
      }
    }
  }
}

AWSTemplateFormatVersion: 2010-09-09
Description: CMS - Fleetmanager Backend
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  AssetLibraryFunctionName:
    Type: String
    Description: AssetLibrary Service API Function Name
  CDFSecurityGroupId:
    Type: String
    Description: CDF Security Groups
  CognitoUserPoolArn:
    Type: String
    Description: Cognito User Pool Arn
  CommandsFunctionName:
    Type: String
    Description: Commands Service API Function Name
  EnableApiGatewayAccessLogs:
    Description: 'Enables API gateway Access Logging, defaults to false if not specified.'
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    MinLength: 1
  Environment:
    Type: String
    Default: dev
    Description: >-
      Environment prefix identifier for resources to be deployed as'dev', 'test'
      or 'prod'
  PrivateSubnetIds:
    Type: CommaDelimitedList
    Description: CDF Private Subnets
  ProjectName:
    Type: String
    Default: cdf_auto_fleetmanager
    Description: IoT Rule prefix identifier for resouces to be deployed
  ProjectPrefix:
    Type: String
    Default: cms
    Description: Prefix added to resource names to identify
  VehicleAnomalyTableStreamArn:
    Type: String
    Description: Reference to CVRA ddb table for vehicle anomaly data
  VpcId:
    Type: String
    Description: Vpc Id for deploying resources within a VPC
  KmsKeyId:
    Type: String
    Description: Kms Key Id
Conditions:
  DeployInVPC: !Not
    - !Equals
      - !Ref VpcId
      - N/A
  EnableApiGatewayAccessLogs: !Equals
    - !Ref EnableApiGatewayAccessLogs
    - 'true'
Resources:
  ApiGatewayAccessLogGroup:
    Condition: EnableApiGatewayAccessLogs
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub 'cms-fleetmanagerbackend-apigatewayaccesslogs-${Environment}'
  ESSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W9
            reason: Changed the CIDR group to /32 from /0.
    Condition: DeployInVPC
    Properties:
      GroupDescription: Allow HTTPs inbound traffic and all outbound access
      Tags:
        - Key: Name
          Value: ESSecurityGroup
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: ingress traffic on port 443 from vpc cidr blocker
          CidrIp: 10.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: egress traffic on port 443 from vpc cidr blocker
          CidrIp: 10.0.0.0/0
  LambdaLayer:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      Description: 'Contains dependencies boto, requests, request_aws4auth, etc.'
      ContentUri: ../../build/python.zip
      CompatibleRuntimes:
        - python3.7
        - python3.8
      RetentionPolicy: Delete
  ESResource:
    Type: 'AWS::Elasticsearch::Domain'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: >-
              There is no explicit name here, domain name is driven by user
              paramaters - ProjectPrefix and Environment.
    Properties:
      DomainName: !Join
        - '-'
        - - !Ref ProjectPrefix
          - es
          - !Ref Environment
      ElasticsearchVersion: '7.1'
      ElasticsearchClusterConfig:
        DedicatedMasterCount: 3
        DedicatedMasterEnabled: true
        DedicatedMasterType: c5.large.elasticsearch
        InstanceType: r5.large.elasticsearch
        InstanceCount: 2
        ZoneAwarenessEnabled: true
        ZoneAwarenessConfig:
          AvailabilityZoneCount: 2
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      NodeToNodeEncryptionOptions:
        Enabled: true
      EncryptionAtRestOptions:
        Enabled: true
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${LambdaESRole}'
            Action:
              - 'es:ESHttp*'
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AnomalyDataESRole}'
            Action:
              - 'es:ESHttp*'
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${IoTEventJobConfigRole}'
            Action:
              - 'es:ESHttp*'
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AddIndexMappingsESRole}'
            Action:
              - 'es:ESHttp*'
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${EventRuleRole}'
            Action:
              - 'es:ESHttp*'
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${DtcRuleRole}'
            Action:
              - 'es:ESHttp*'
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${TripRuleRole}'
            Action:
              - 'es:ESHttp*'
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${TelemetryRuleRole}'
            Action:
              - 'es:ESHttp*'
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${OtaRuleRole}'
            Action:
              - 'es:ESHttp*'
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${GroupEventRole}'
            Action:
              - 'es:ESHttp*'
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${DeviceEventRole}'
            Action:
              - 'es:ESHttp*'
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${MiscTelemetryRole}'
            Action:
              - 'es:ESHttp*'
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
      VPCOptions: !If
        - DeployInVPC
        - SecurityGroupIds:
            - !Ref ESSecurityGroup
          SubnetIds: !Ref PrivateSubnetIds
        - !Ref 'AWS::NoValue'
  
  MiscTelemetryRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'es:ESHttp*'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-es-policy
        - PolicyDocument:
            Statement:
              - Action:
                  - 'kinesis:DescribeStream'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-kinesis-stream-policy
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
  
  
  
  
  
  LambdaESRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'lambda:Invoke*'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CommandsFunctionName}
                  - !Sub >-
                    arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AssetLibraryFunctionName}
              - Action:
                  - 'ssm:GetParameter'
                  - 'ssm:PutParameter'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cdf-ca-key-*
              - Action:
                  - 'iot:DescribeJobExecution'
                  - 'iot:ListJobs'
                  - 'iot:ListJobExecutionsForJob'
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
              - Action:
                  - 'es:ESHttp*'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-es-policy
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonKinesisVideoStreamsFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonESFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AWSIoTFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
  AnomalyDataESRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'kms:GenerateDataKey'
                  - 'kms:Decrypt'
                Effect: Allow
                Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
              - Action:
                  - 'es:ESHttp*'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
              - Sid: APIAccessForDynamoDBStreams
                Effect: Allow
                Action:
                  - 'dynamodb:GetRecords'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:DescribeStream'
                  - 'dynamodb:ListStreams'
                Resource: !Ref VehicleAnomalyTableStreamArn
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-es-policy
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
  IoTEventJobConfigRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'iot:UpdateEventConfigurations'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:IotEventJobConfig
              - Action:
                  - 'es:ESHttp*'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-es-policy
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
  AddIndexMappingsESRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'es:ESHttp*'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-es-policy
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
  EventRuleRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'es:ESHttp*'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-es-policy
        - PolicyDocument:
            Statement:
              - Action:
                  - 'kinesis:DescribeStream'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-kinesis-stream-policy
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
  DtcRuleRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'es:ESHttp*'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-es-policy
        - PolicyDocument:
            Statement:
              - Action:
                  - 'kinesis:DescribeStream'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-kinesis-stream-policy
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
  TripRuleRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'es:ESHttp*'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-es-policy
        - PolicyDocument:
            Statement:
              - Action:
                  - 'kinesis:DescribeStream'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-kinesis-stream-policy
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
  TelemetryRuleRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'es:ESHttp*'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-es-policy
        - PolicyDocument:
            Statement:
              - Action:
                  - 'kinesis:DescribeStream'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-kinesis-stream-policy
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
  OtaRuleRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'es:ESHttp*'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-es-policy
        - PolicyDocument:
            Statement:
              - Action:
                  - 'kinesis:DescribeStream'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-kinesis-stream-policy
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
        - 'arn:aws:iam::aws:policy/AWSIoTFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
  GroupEventRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'es:ESHttp*'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-es-policy
        - PolicyDocument:
            Statement:
              - Action:
                  - 'kinesis:DescribeStream'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-kinesis-stream-policy
        - PolicyDocument:
            Statement:
              - Action:
                  - 'lambda:*'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-invoke-policy
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
  DeviceEventRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'es:ESHttp*'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/cms-es-${Environment}/*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-es-policy
        - PolicyDocument:
            Statement:
              - Action:
                  - 'kinesis:DescribeStream'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-kinesis-stream-policy
        - PolicyDocument:
            Statement:
              - Action:
                  - 'lambda:*'
                Effect: Allow
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
            Version: 2012-10-17
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref 'AWS::AccountId'
              - lambda-invoke-policy
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'


  MiscTelemetryPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref MiscTelemetry
      Principal: iot.amazonaws.com
  MiscTelemetry:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../../build/cdf_auto_fleetmanager_misc_telemetry.zip
      Handler: !Sub misc_telemetry_controller.lambda_handler
      Role: !GetAtt
        - MiscTelemetryRole
        - Arn
      Runtime: python3.8
      Timeout: 900
      Environment:
        Variables:
          ES_ENDPOINT: !Sub
            - 'https://${ESDomain}'
            - ESDomain: !GetAtt
                - ESResource
                - DomainEndpoint
          REGION: !Ref 'AWS::Region'
      Layers:
        - !Ref LambdaLayer
      VpcConfig: !If
        - DeployInVPC
        - SecurityGroupIds:
            - !Ref ESSecurityGroup
          SubnetIds: !Ref PrivateSubnetIds
        - !Ref 'AWS::NoValue'






  DeviceEventPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref DeviceEvent
      Principal: iot.amazonaws.com
  DeviceEvent:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../../build/cdf_auto_fleetmanager_device_events.zip
      Handler: !Sub device_controller.lambda_handler
      Role: !GetAtt
        - DeviceEventRole
        - Arn
      Runtime: python3.7
      Timeout: 30
      Environment:
        Variables:
          ES_ENDPOINT: !Sub
            - 'https://${ESDomain}'
            - ESDomain: !GetAtt
                - ESResource
                - DomainEndpoint
          REGION: !Ref 'AWS::Region'
          ASSET_LIBRARY_FUNCTION_NAME: !Ref AssetLibraryFunctionName
      Layers:
        - !Ref LambdaLayer
      VpcConfig: !If
        - DeployInVPC
        - SecurityGroupIds:
            - !Ref ESSecurityGroup
          SubnetIds: !Ref PrivateSubnetIds
        - !Ref 'AWS::NoValue'
  GroupEventPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref GroupEvent
      Principal: iot.amazonaws.com
  GroupEvent:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../../build/cdf_auto_fleetmanager_group_events.zip
      Handler: !Sub group_controller.lambda_handler
      Role: !GetAtt
        - GroupEventRole
        - Arn
      Runtime: python3.7
      Timeout: 30
      Environment:
        Variables:
          ES_ENDPOINT: !Sub
            - 'https://${ESDomain}'
            - ESDomain: !GetAtt
                - ESResource
                - DomainEndpoint
          REGION: !Ref 'AWS::Region'
          ASSET_LIBRARY_FUNCTION_NAME: !Ref AssetLibraryFunctionName
      Layers:
        - !Ref LambdaLayer
      VpcConfig: !If
        - DeployInVPC
        - SecurityGroupIds:
            - !Ref ESSecurityGroup
          SubnetIds: !Ref PrivateSubnetIds
        - !Ref 'AWS::NoValue'
  OtaRulePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref OtaRule
      Principal: iot.amazonaws.com
  OtaRule:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../../build/cdf_auto_fleetmanager_ota_rule.zip
      Handler: !Sub ota_controller.lambda_handler
      Role: !GetAtt
        - OtaRuleRole
        - Arn
      Runtime: python3.7
      Timeout: 30
      Environment:
        Variables:
          ES_ENDPOINT: !Sub
            - 'https://${ESDomain}'
            - ESDomain: !GetAtt
                - ESResource
                - DomainEndpoint
          ASSET_LIBRARY_FUNCTION_NAME: !Ref AssetLibraryFunctionName
          REGION: !Ref 'AWS::Region'
      Layers:
        - !Ref LambdaLayer
      VpcConfig: !If
        - DeployInVPC
        - SecurityGroupIds:
            - !Ref ESSecurityGroup
          SubnetIds: !Ref PrivateSubnetIds
        - !Ref 'AWS::NoValue'
  TelemetryRulePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref TelemetryRule
      Principal: iot.amazonaws.com
  TelemetryRule:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../../build/cdf_auto_fleetmanager_telemetry_rule.zip
      Handler: !Sub telemetry_controller.lambda_handler
      Role: !GetAtt
        - TelemetryRuleRole
        - Arn
      Runtime: python3.7
      Timeout: 30
      Environment:
        Variables:
          ES_ENDPOINT: !Sub
            - 'https://${ESDomain}'
            - ESDomain: !GetAtt
                - ESResource
                - DomainEndpoint
          REGION: !Ref 'AWS::Region'
      Layers:
        - !Ref LambdaLayer
      VpcConfig: !If
        - DeployInVPC
        - SecurityGroupIds:
            - !Ref ESSecurityGroup
          SubnetIds: !Ref PrivateSubnetIds
        - !Ref 'AWS::NoValue'
  TripRulePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref TripRule
      Principal: iot.amazonaws.com
  TripRule:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../../build/cdf_auto_fleetmanager_trips_rule.zip
      Handler: !Sub trip_controller.lambda_handler
      Role: !GetAtt
        - TripRuleRole
        - Arn
      Runtime: python3.7
      Timeout: 30
      Environment:
        Variables:
          ES_ENDPOINT: !Sub
            - 'https://${ESDomain}'
            - ESDomain: !GetAtt
                - ESResource
                - DomainEndpoint
          REGION: !Ref 'AWS::Region'
      Layers:
        - !Ref LambdaLayer
      VpcConfig: !If
        - DeployInVPC
        - SecurityGroupIds:
            - !Ref ESSecurityGroup
          SubnetIds: !Ref PrivateSubnetIds
        - !Ref 'AWS::NoValue'
  DtcRulePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref DtcRule
      Principal: iot.amazonaws.com
  DtcRule:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../../build/cdf_auto_fleetmanager_dtc_rule.zip
      Handler: !Sub dtc_controller.lambda_handler
      Role: !GetAtt
        - DtcRuleRole
        - Arn
      Runtime: python3.7
      Timeout: 30
      Environment:
        Variables:
          ES_ENDPOINT: !Sub
            - 'https://${ESDomain}'
            - ESDomain: !GetAtt
                - ESResource
                - DomainEndpoint
          REGION: !Ref 'AWS::Region'
      Layers:
        - !Ref LambdaLayer
      VpcConfig: !If
        - DeployInVPC
        - SecurityGroupIds:
            - !Ref ESSecurityGroup
          SubnetIds: !Ref PrivateSubnetIds
        - !Ref 'AWS::NoValue'
  EventRulePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref EventRule
      Principal: iot.amazonaws.com
  EventRule:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../../build/cdf_auto_fleetmanager_event_rule.zip
      Handler: !Sub event_controller.lambda_handler
      Role: !GetAtt
        - EventRuleRole
        - Arn
      Runtime: python3.7
      Timeout: 30
      Environment:
        Variables:
          ES_ENDPOINT: !Sub
            - 'https://${ESDomain}'
            - ESDomain: !GetAtt
                - ESResource
                - DomainEndpoint
          REGION: !Ref 'AWS::Region'
      Layers:
        - !Ref LambdaLayer
      VpcConfig: !If
        - DeployInVPC
        - SecurityGroupIds:
            - !Ref ESSecurityGroup
          SubnetIds: !Ref PrivateSubnetIds
        - !Ref 'AWS::NoValue'


  MiscTelemetryRule:
    Type: 'AWS::IoT::TopicRule'
    Properties:
      RuleName: !Join
        - _
        - - !Ref ProjectName
          - iot_misc_data
      TopicRulePayload:
        AwsIotSqlVersion: 2016-03-23
        Description: Passes ev/tire telemetry data to AWS IoT
        RuleDisabled: false
        Sql: SELECT * FROM 'dt/cvra/+/misc'
        Actions:
          - Kinesis:
              RoleArn: !GetAtt
                - IoTKinesisRole
                - Arn
              StreamName: !Ref MiscTelemetryKinesisStream

  EventDeviceRule:
    Type: 'AWS::IoT::TopicRule'
    Properties:
      RuleName: !Join
        - _
        - - !Ref ProjectName
          - assetlibrary_event_device
      TopicRulePayload:
        AwsIotSqlVersion: 2016-03-23
        Description: Passes device provision data to AWS IoT
        RuleDisabled: false
        Sql: 'SELECT * FROM ''cdf/assetlibrary/events/devices/#'''
        Actions:
          - Kinesis:
              RoleArn: !GetAtt
                - IoTKinesisRole
                - Arn
              StreamName: !Ref AssetLibraryDeviceKinesisStream
  EventGroupRule:
    Type: 'AWS::IoT::TopicRule'
    Properties:
      RuleName: !Join
        - _
        - - !Ref ProjectName
          - assetlibrary_event_group
      TopicRulePayload:
        AwsIotSqlVersion: 2016-03-23
        Description: Passes vehicle data associated with device to AWS IoT
        RuleDisabled: false
        Sql: 'SELECT * FROM ''cdf/assetlibrary/events/groups/#'''
        Actions:
          - Kinesis:
              RoleArn: !GetAtt
                - IoTKinesisRole
                - Arn
              StreamName: !Ref AssetLibraryGroupKinesisStream
  OtaDataRule:
    Type: 'AWS::IoT::TopicRule'
    Properties:
      RuleName: !Join
        - _
        - - !Ref ProjectName
          - iot_ota_data
      TopicRulePayload:
        AwsIotSqlVersion: 2016-03-23
        Description: Passes ota data to AWS IoT
        RuleDisabled: false
        Sql: 'SELECT * FROM ''$aws/events/jobExecution/#'''
        Actions:
          - Kinesis:
              RoleArn: !GetAtt
                - IoTKinesisRole
                - Arn
              StreamName: !Ref OTAKinesisStream
  CarDataRule:
    Type: 'AWS::IoT::TopicRule'
    Properties:
      RuleName: !Join
        - _
        - - !Ref ProjectName
          - iot_car_data
      TopicRulePayload:
        AwsIotSqlVersion: 2016-03-23
        Description: Passes telemtry data to AWS IoT
        RuleDisabled: false
        Sql: SELECT * FROM 'dt/cvra/+/cardata'
        Actions:
          - Kinesis:
              RoleArn: !GetAtt
                - IoTKinesisRole
                - Arn
              StreamName: !Ref TelemetryKinesisStream
  TripDataRule:
    Type: 'AWS::IoT::TopicRule'
    Properties:
      RuleName: !Join
        - _
        - - !Ref ProjectName
          - iot_trip_data
      TopicRulePayload:
        AwsIotSqlVersion: 2016-03-23
        Description: Passes trip data to AWS IoT
        RuleDisabled: false
        Sql: SELECT * FROM 'dt/cvra/+/trip'
        Actions:
          - Kinesis:
              RoleArn: !GetAtt
                - IoTKinesisRole
                - Arn
              StreamName: !Ref TripKinesisStream
  DtcDataRule:
    Type: 'AWS::IoT::TopicRule'
    Properties:
      RuleName: !Join
        - _
        - - !Ref ProjectName
          - iot_dtc_data
      TopicRulePayload:
        AwsIotSqlVersion: 2016-03-23
        Description: Passes dtc data to AWS IoT
        RuleDisabled: false
        Sql: SELECT * FROM 'dt/cvra/+/dtc'
        Actions:
          - Kinesis:
              RoleArn: !GetAtt
                - IoTKinesisRole
                - Arn
              StreamName: !Ref DtcKinesisStream
  EventDataRule:
    Type: 'AWS::IoT::TopicRule'
    Properties:
      RuleName: !Join
        - _
        - - !Ref ProjectName
          - iot_event_data
      TopicRulePayload:
        AwsIotSqlVersion: 2016-03-23
        Description: Passes event data to AWS IoT
        RuleDisabled: false
        Sql: SELECT * FROM 'dt/cvra/+/event'
        Actions:
          - Kinesis:
              RoleArn: !GetAtt
                - IoTKinesisRole
                - Arn
              StreamName: !Ref EventKinesisStream
  AddIndexMappingsES:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../../build/cdf_auto_fleetmanager_elasticsearch_helper.zip
      Handler: !Sub '${ProjectName}_elasticsearch_helper.lambda_handler'
      Environment:
        Variables:
          ES_ENDPOINT: !GetAtt
            - ESResource
            - DomainEndpoint
          REGION: !Ref 'AWS::Region'
      Role: !GetAtt
        - AddIndexMappingsESRole
        - Arn
      Runtime: python3.7
      Timeout: 12
      Layers:
        - !Ref LambdaLayer
      VpcConfig: !If
        - DeployInVPC
        - SecurityGroupIds:
            - !Ref ESSecurityGroup
          SubnetIds: !Ref PrivateSubnetIds
        - !Ref 'AWS::NoValue'
  AddIndexMappingsESInvoke:
    Type: 'Custom::AddIndexMappingsES'
    Properties:
      ServiceToken: !GetAtt
        - AddIndexMappingsES
        - Arn
  IotEventJobConfig:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../../build/cdf_auto_fleetmanager_iot_event_config.zip
      Handler: !Sub '${ProjectName}_iot_event_config.lambda_handler'
      Role: !GetAtt
        - IoTEventJobConfigRole
        - Arn
      Runtime: python3.7
      Timeout: 12
      Layers:
        - !Ref LambdaLayer
      VpcConfig: !If
        - DeployInVPC
        - SecurityGroupIds:
            - !Ref ESSecurityGroup
          SubnetIds: !Ref PrivateSubnetIds
        - !Ref 'AWS::NoValue'
  IotEventJobConfigInvoke:
    Type: 'Custom::IotEventJobConfig'
    Properties:
      ServiceToken: !GetAtt
        - IotEventJobConfig
        - Arn
  AnomalyDataESPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref AnomalyDataES
      Principal: lambda.amazonaws.com
  AnomalyDataES:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ../../build/cdf_auto_fleetmanager_anomaly_ddb_es.zip
      Handler: !Sub anomaly_ddb_controller.lambda_handler
      Environment:
        Variables:
          ES_ENDPOINT: !Sub
            - 'https://${ESDomain}/'
            - ESDomain: !GetAtt
                - ESResource
                - DomainEndpoint
          REGION: !Ref 'AWS::Region'
      Role: !GetAtt
        - AnomalyDataESRole
        - Arn
      Runtime: python3.7
      Timeout: 30
      Layers:
        - !Ref LambdaLayer
      VpcConfig: !If
        - DeployInVPC
        - SecurityGroupIds:
            - !Ref ESSecurityGroup
          SubnetIds: !Ref PrivateSubnetIds
        - !Ref 'AWS::NoValue'
  DataTableStream:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !Ref VehicleAnomalyTableStreamArn
      FunctionName: !GetAtt
        - AnomalyDataES
        - Arn
      StartingPosition: LATEST
  IoTKinesisRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - iot.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
        - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'

  MiscTelemetryKinesisStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      RetentionPeriodHours: 24
      ShardCount: 1
      Tags:
        - Key: Environment
          Value: !Ref Environment
    DependsOn:
      - MiscTelemetryRole
  InboundStreamEVTireKinesisStreamLambdaFunction:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 100
      Enabled: true
      EventSourceArn: !GetAtt
        - MiscTelemetryKinesisStream
        - Arn
      FunctionName: !GetAtt
        - MiscTelemetry
        - Arn
      MaximumBatchingWindowInSeconds: 0
      StartingPosition: LATEST

  TripKinesisStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      RetentionPeriodHours: 24
      ShardCount: 1
      Tags:
        - Key: Environment
          Value: !Ref Environment
    DependsOn:
      - TripRuleRole
  InboundStreamTripLambdaFunction:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 100
      Enabled: true
      EventSourceArn: !GetAtt
        - TripKinesisStream
        - Arn
      FunctionName: !GetAtt
        - TripRule
        - Arn
      MaximumBatchingWindowInSeconds: 0
      StartingPosition: LATEST
  TelemetryKinesisStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      RetentionPeriodHours: 24
      ShardCount: 1
      Tags:
        - Key: Environment
          Value: !Ref Environment
    DependsOn:
      - TelemetryRuleRole
  InboundStreamTelemetryLambdaFunction:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 100
      Enabled: true
      EventSourceArn: !GetAtt
        - TelemetryKinesisStream
        - Arn
      FunctionName: !GetAtt
        - TelemetryRule
        - Arn
      MaximumBatchingWindowInSeconds: 0
      StartingPosition: LATEST
  OTAKinesisStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      RetentionPeriodHours: 24
      ShardCount: 1
      Tags:
        - Key: Environment
          Value: !Ref Environment
    DependsOn:
      - OtaRuleRole
  InboundStreamOTALambdaFunction:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 100
      Enabled: true
      EventSourceArn: !GetAtt
        - OTAKinesisStream
        - Arn
      FunctionName: !GetAtt
        - OtaRule
        - Arn
      MaximumBatchingWindowInSeconds: 0
      StartingPosition: LATEST
  EventKinesisStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      RetentionPeriodHours: 24
      ShardCount: 1
      Tags:
        - Key: Environment
          Value: !Ref Environment
    DependsOn:
      - EventRuleRole
  InboundStreamEventLambdaFunction:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 100
      Enabled: true
      EventSourceArn: !GetAtt
        - EventKinesisStream
        - Arn
      FunctionName: !GetAtt
        - EventRule
        - Arn
      MaximumBatchingWindowInSeconds: 0
      StartingPosition: LATEST
  DtcKinesisStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      RetentionPeriodHours: 24
      ShardCount: 1
      Tags:
        - Key: Environment
          Value: !Ref Environment
    DependsOn:
      - DtcRuleRole
  InboundStreamDtcLambdaFunction:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 100
      Enabled: true
      EventSourceArn: !GetAtt
        - DtcKinesisStream
        - Arn
      FunctionName: !GetAtt
        - DtcRule
        - Arn
      MaximumBatchingWindowInSeconds: 0
      StartingPosition: LATEST
  AssetLibraryDeviceKinesisStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      RetentionPeriodHours: 24
      ShardCount: 1
      Tags:
        - Key: Environment
          Value: !Ref Environment
    DependsOn:
      - DeviceEventRole
  InboundStreamAssetLibraryEventDeviceLambdaFunction:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 100
      Enabled: true
      EventSourceArn: !GetAtt
        - AssetLibraryDeviceKinesisStream
        - Arn
      FunctionName: !GetAtt
        - DeviceEvent
        - Arn
      MaximumBatchingWindowInSeconds: 0
      StartingPosition: LATEST
  AssetLibraryGroupKinesisStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      RetentionPeriodHours: 24
      ShardCount: 1
      Tags:
        - Key: Environment
          Value: !Ref Environment
    DependsOn:
      - GroupEventRole
  InboundStreamAssetLibraryEventGroupLambdaFunction:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 100
      Enabled: true
      EventSourceArn: !GetAtt
        - AssetLibraryGroupKinesisStream
        - Arn
      FunctionName: !GetAtt
        - GroupEvent
        - Arn
      MaximumBatchingWindowInSeconds: 0
      StartingPosition: LATEST
  APIHandler:
    Properties:
      Role: !GetAtt
        - LambdaESRole
        - Arn
      Environment:
        Variables:
          ES_ENDPOINT: !Sub
            - 'https://${ESDomain}'
            - ESDomain: !GetAtt
                - ESResource
                - DomainEndpoint
          COMMANDS_FUNCTION_NAME: !Ref CommandsFunctionName
          REGION: !Ref 'AWS::Region'
      VpcConfig: !If
        - DeployInVPC
        - SecurityGroupIds:
            - !Ref ESSecurityGroup
          SubnetIds: !Ref PrivateSubnetIds
        - !Ref 'AWS::NoValue'
Outputs:
  FleetmanagerApiGatewayUrl:
    Value: !Sub 'https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod'
  FleetmanagerApiGatewayHost:
    Value: !Sub '${RestAPI}.execute-api.${AWS::Region}.amazonaws.com'

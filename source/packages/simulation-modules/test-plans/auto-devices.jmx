<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="cdf-auto-test-plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="threadsCount" elementType="Argument">
            <stringProp name="Argument.name">threadsCount</stringProp>
            <stringProp name="Argument.value">${__P(threads.number)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="threadsRampupSecs" elementType="Argument">
            <stringProp name="Argument.name">threadsRampupSecs</stringProp>
            <stringProp name="Argument.value">${__P(threads.rampup)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="threadsLoopCount" elementType="Argument">
            <stringProp name="Argument.name">threadsLoopCount</stringProp>
            <stringProp name="Argument.value">${__P(threads.loopcount)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="awsRegion" elementType="Argument">
            <stringProp name="Argument.name">awsRegion</stringProp>
            <stringProp name="Argument.value">${__P(aws.region)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="s3Bucket" elementType="Argument">
            <stringProp name="Argument.name">s3Bucket</stringProp>
            <stringProp name="Argument.value">${__P(aws.s3.bucket)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="s3SimulationEngineKey" elementType="Argument">
            <stringProp name="Argument.name">s3SimulationEngineKey</stringProp>
            <stringProp name="Argument.value">${__P(modules.simulationEngine)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dataDir" elementType="Argument">
            <stringProp name="Argument.name">dataDir</stringProp>
            <stringProp name="Argument.value">${__P(dataDir)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="s3CertificateKey" elementType="Argument">
            <stringProp name="Argument.name">s3CertificateKey</stringProp>
            <stringProp name="Argument.value">${__P(attributes.certificate)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="s3CaKey" elementType="Argument">
            <stringProp name="Argument.name">s3CaKey</stringProp>
            <stringProp name="Argument.value">${__P(attributes.ca)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="s3PrivateKeyKey" elementType="Argument">
            <stringProp name="Argument.name">s3PrivateKeyKey</stringProp>
            <stringProp name="Argument.value">${__P(attributes.privateKey)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="s3RouteGenKey" elementType="Argument">
            <stringProp name="Argument.name">s3RouteGenKey</stringProp>
            <stringProp name="Argument.value">${__P(modules.routeGen)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="s3InstanceKey" elementType="Argument">
            <stringProp name="Argument.name">s3InstanceKey</stringProp>
            <stringProp name="Argument.value">${__P(aws.s3.instanceKey)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mapboxToken" elementType="Argument">
            <stringProp name="Argument.name">mapboxToken</stringProp>
            <stringProp name="Argument.value">${__P(attributes.mapboxToken)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="awsIotHost" elementType="Argument">
            <stringProp name="Argument.name">awsIotHost</stringProp>
            <stringProp name="Argument.value">${__P(aws.iot.host)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Download datasets, certs and modules" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters">awsRegion,s3Bucket,s3SimulationEngineKey,dataDir,s3CertificateKey,s3PrivateKeyKey,s3CaKey,s3RouteGenKey,s3InstanceKey</stringProp>
          <stringProp name="script">import java.io.IOException
import java.io.InputStream
import java.util.Properties

import com.amazonaws.services.s3.AmazonS3
import com.amazonaws.services.s3.AmazonS3ClientBuilder
import com.amazonaws.services.s3.model.GetObjectRequest
import com.amazonaws.services.s3.model.S3Object
import com.amazonaws.auth.BasicAWSCredentials
import com.amazonaws.auth.AWSStaticCredentialsProvider
import com.amazonaws.services.s3.S3CredentialsProviderChain
import java.nio.file.Path;
import java.nio.file.Paths;

def awsRegion = vars.get(&quot;awsRegion&quot;)
def s3CertificateKey = vars.get(&quot;s3CertificateKey&quot;)
def s3PrivateKeyKey = vars.get(&quot;s3PrivateKeyKey&quot;)
def s3CaKey = vars.get(&quot;s3CaKey&quot;)

def s3Bucket = vars.get(&quot;s3Bucket&quot;)

def s3InstanceKey = vars.get(&quot;s3InstanceKey&quot;)
def s3SimulationEngineKey = vars.get(&quot;s3SimulationEngineKey&quot;)
def s3RouteGenKey = vars.get(&quot;s3RouteGenKey&quot;)

def dataDir = vars.get(&quot;dataDir&quot;)

log.info(&quot;awsRegion: &quot; + awsRegion)
log.info(&quot;s3Bucket: &quot; + s3Bucket)
log.info(&quot;s3InstanceKey: &quot; + s3InstanceKey)
log.info(&quot;s3SimulationEngineKey: &quot; + s3SimulationEngineKey)
log.info(&quot;s3RouteGenKey: &quot; + s3RouteGenKey)
log.info(&quot;s3CertificateKey: &quot; + s3CertificateKey)
log.info(&quot;s3PrivateKeyKey: &quot; + s3PrivateKeyKey)
log.info(&quot;s3CaKey: &quot; + s3CaKey)
log.info(&quot;dataDir: &quot; + dataDir)

def s3Client = AmazonS3ClientBuilder.standard()
                .withRegion(awsRegion)
                .build()

try {
    // download everything we need for the test
    def s3DeviceStateKey = s3InstanceKey + &apos;deviceState.csv&apos;
    def toDownload = [s3DeviceStateKey, s3CertificateKey, s3PrivateKeyKey, s3CaKey, s3SimulationEngineKey, s3RouteGenKey]
    for(def f in toDownload) {
        log.info(&apos;Downloading from bucket: &apos; + s3Bucket + &apos;, key: &apos; + f)
        def s3Object = s3Client.getObject(new GetObjectRequest(s3Bucket, f))
        def s3is = s3Object.getObjectContent();
        def destination = new File(dataDir, Paths.get(f).getFileName().toString())
        def fos = new FileOutputStream(destination);
        def read_buf = new byte[1024];
        def read_len = 0;
        while ((read_len = s3is.read(read_buf)) &gt; 0) {
            fos.write(read_buf, 0, read_len);
        }
        s3is.close();
        fos.close();
    }

} catch (Exception e) {
    log.error(e.getMessage());
}
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Unzip the simulation-engine" enabled="true">
          <stringProp name="TestPlan.comments">Way faster using the unzip command instead of java unzip libraries</stringProp>
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">unzip</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">simulation-engine.zip</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">-d</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">simulation-engine</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${dataDir}</stringProp>
        </SystemSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Unzip the route-gen" enabled="true">
          <stringProp name="TestPlan.comments">Way faster using the unzip command instead of java unzip libraries</stringProp>
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">unzip</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">auto-route-gen.zip</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">-d</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">auto-route-gen</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${dataDir}</stringProp>
        </SystemSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Install node dependencies (route-gen)" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">true</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">npm</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">install</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="NODE_CONFIG" elementType="Argument">
                <stringProp name="Argument.name">NODE_CONFIG</stringProp>
                <stringProp name="Argument.value">{&quot;aws&quot;:{&quot;region&quot;:&quot;${awsRegion}&quot;,&quot;iot&quot;:{&quot;keyPath&quot;:&quot;${dataDir}/private.pem.key&quot;,&quot;certPath&quot;:&quot;${dataDir}/certificate.pem.crt&quot;,&quot;caPath&quot;:&quot;${dataDir}/aws-ca.pem&quot;,&quot;host&quot;:&quot;${awsIotHost}&quot;}},&quot;cvra&quot;:{&quot;templates&quot;:{&quot;carData&quot;:&quot;templates/cardata.template&quot;,&quot;dtc&quot;:&quot;templates/dtc.template&quot;,&quot;event&quot;:&quot;templates/event.template&quot;,&quot;trip&quot;:&quot;templates/trip.template&quot;}}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="NODE_CONFIG_DIR" elementType="Argument">
                <stringProp name="Argument.name">NODE_CONFIG_DIR</stringProp>
                <stringProp name="Argument.value">./config</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="SystemSampler.directory">${dataDir}/auto-route-gen</stringProp>
          <stringProp name="SystemSampler.stdout">${dataDir}/auto-route-gen-nodeSetup-stdout.txt</stringProp>
          <stringProp name="SystemSampler.stderr">${dataDir}/auto-route-gen-nodeSetup-stderr.txt</stringProp>
        </SystemSampler>
        <hashTree/>
      </hashTree>
      <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Install node dependencies (auto-simulation)" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">true</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">npm</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">install</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="NODE_CONFIG" elementType="Argument">
                <stringProp name="Argument.name">NODE_CONFIG</stringProp>
                <stringProp name="Argument.value">{&quot;aws&quot;:{&quot;region&quot;:&quot;${awsRegion}&quot;,&quot;iot&quot;:{&quot;keyPath&quot;:&quot;${dataDir}/private.pem.key&quot;,&quot;certPath&quot;:&quot;${dataDir}/certificate.pem.crt&quot;,&quot;caPath&quot;:&quot;${dataDir}/aws-ca.pem&quot;,&quot;host&quot;:&quot;${awsIotHost}&quot;}},&quot;cvra&quot;:{&quot;templates&quot;:{&quot;carData&quot;:&quot;templates/cardata.template&quot;,&quot;dtc&quot;:&quot;templates/dtc.template&quot;,&quot;event&quot;:&quot;templates/event.template&quot;,&quot;trip&quot;:&quot;templates/trip.template&quot;}}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="NODE_CONFIG_DIR" elementType="Argument">
                <stringProp name="Argument.name">NODE_CONFIG_DIR</stringProp>
                <stringProp name="Argument.value">./config</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="SystemSampler.directory">${dataDir}/simulation-engine</stringProp>
          <stringProp name="SystemSampler.stdout">${dataDir}/simulation-engine-nodeSetup-stdout.txt</stringProp>
          <stringProp name="SystemSampler.stderr">${dataDir}/simulation-engine-nodeSetup-stderr.txt</stringProp>
        </SystemSampler>
        <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Simulation" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${threadsLoopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${threadsCount}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${threadsRampupSecs}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Read" enabled="true">
          <stringProp name="filename">${dataDir}/deviceState.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Generate route" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">node</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">app.js</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">--latitude=${latitude}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">--longitude=${longitude}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">--saveAs=${dataDir}/${vin}-route.json</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">--triggers=[{&quot;type&quot;:&quot;dtc&quot;,&quot;occurances&quot;:2},{&quot;type&quot;:&quot;oiltemp&quot;,&quot;occurances&quot;:2}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">--distance=20000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="NODE_CONFIG" elementType="Argument">
                <stringProp name="Argument.name">NODE_CONFIG</stringProp>
                <stringProp name="Argument.value">{&quot;aws&quot;:{&quot;region&quot;:&quot;${awsRegion}&quot;},&quot;mapbox&quot;:{&quot;access_token&quot;:&quot;${mapboxToken}&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="NODE_CONFIG_DIR" elementType="Argument">
                <stringProp name="Argument.name">NODE_CONFIG_DIR</stringProp>
                <stringProp name="Argument.value">./config</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="SystemSampler.directory">${dataDir}/auto-route-gen</stringProp>
          <stringProp name="SystemSampler.stdout">${dataDir}/${deviceId}-routeGen-stdout.txt</stringProp>
          <stringProp name="SystemSampler.stderr">${dataDir}/${deviceId}-routeGen-stderr.txt</stringProp>
        </SystemSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Upload route" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters">awsRegion,s3Bucket,dataDir,vin,s3InstanceKey</stringProp>
          <stringProp name="script">import java.io.IOException
import java.io.InputStream
import java.util.Properties

import com.amazonaws.AmazonServiceException;
import com.amazonaws.SdkClientException;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;

import java.io.File;
import java.io.IOException;

def awsRegion = vars.get(&quot;awsRegion&quot;)
def s3Bucket = vars.get(&quot;s3Bucket&quot;)
def dataDir = vars.get(&quot;dataDir&quot;)
def vin = vars.get(&quot;vin&quot;)
def s3InstanceKey = vars.get(&quot;s3InstanceKey&quot;)

def s3Client = AmazonS3ClientBuilder.standard()
                .withRegion(awsRegion)
                .build()

try {
    // upload the route
    def src = dataDir + &quot;/&quot; + vin + &quot;-route.json&quot;
    def uploadKey = s3InstanceKey + vin + &quot;-route.json&quot;

    // download everything we need for the test
    def request = new PutObjectRequest(s3Bucket, uploadKey, new File(src));
    s3Client.putObject(request);

    vars.put(&quot;routeLocal&quot;, src)
    vars.put(&quot;routeS3Key&quot;, uploadKey)

} catch (Exception e) {
    log.error(e.getMessage());
}
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Simulate vehicle" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">node</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">app.js</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">--deviceId=${deviceId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">--vin=${vin}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">--odometer=${odometer}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">--fuelTankCapacity=50</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">--latitude=${latitude}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">--longitude=${longitude}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">--routePath=${routeLocal}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">--routeS3Bucket=${s3Bucket}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">--routeS3Key=${routeS3Key}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">--simulationId=${simulationId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="NODE_CONFIG" elementType="Argument">
                <stringProp name="Argument.name">NODE_CONFIG</stringProp>
                <stringProp name="Argument.value">{&quot;aws&quot;:{&quot;region&quot;:&quot;${awsRegion}&quot;,&quot;iot&quot;:{&quot;keyPath&quot;:&quot;${dataDir}/private.pem.key&quot;,&quot;certPath&quot;:&quot;${dataDir}/certificate.pem.crt&quot;,&quot;caPath&quot;:&quot;${dataDir}/aws-ca.pem&quot;,&quot;host&quot;:&quot;${awsIotHost}&quot;}},&quot;cvra&quot;:{&quot;templates&quot;:{&quot;carData&quot;:&quot;templates/cardata.template&quot;,&quot;dtc&quot;:&quot;templates/dtc.template&quot;,&quot;event&quot;:&quot;templates/event.template&quot;,&quot;trip&quot;:&quot;templates/trip.template&quot;}}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="NODE_CONFIG_DIR" elementType="Argument">
                <stringProp name="Argument.name">NODE_CONFIG_DIR</stringProp>
                <stringProp name="Argument.value">./config</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="SystemSampler.directory">${dataDir}/simulation-engine</stringProp>
          <stringProp name="SystemSampler.stdout">${dataDir}/${deviceId}-simulation-stdout.txt</stringProp>
          <stringProp name="SystemSampler.stderr">${dataDir}/${deviceId}-simulation-stderr.txt</stringProp>
        </SystemSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>

#---------------------------------------------------------------------------------------------------------------------
#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *
#                                                                                                                    *
#  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance    *
#  with the License. A copy of the License is located at                                                             *
#                                                                                                                    *
#      http://www.apache.org/licenses/LICENSE-2.0                                                                    *
#                                                                                                                    *
#  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *
#  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *
#  and limitations under the License.                                                                                *
#---------------------------------------------------------------------------------------------------------------------
AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CMS - CDF Facade Stack

Globals:
  Api:
    OpenApiVersion: 3.0.1

Parameters:
  ApiGatewayDefinitionTemplate:
    Description: |
      Name of the API Gateway Cloudformation definition along with the authorization method to use.  Use one of the provided
      templates to implement no auth, private, api key, lambda request, lamdba token, or Cognito auth, or modify one to meet your own
      authentization requirements.  The template must exist within the provided TemplateSnippetS3UriBase location.
    Type: String
    MinLength: 1

  ApplicationConfigurationOverride:
    Description: This allows you to override any configuration application configuration. Must be a JSON formatted string. Any configurations contained in this will override the configurations found and merged from the config files.
    Type: String
    MinLength: 1

  AssetLibraryFunctionName:
    Description: CDF Core Asset Library Service API Function Name
    Type: String
    MinLength: 1

  AuthType:
    Description: Authorization type to apply to the API gateway endpoints
    Type: String
    Default: None
    AllowedValues:
      - None
      - Private
      - Cognito
      - LambdaRequest
      - LambdaToken
      - ApiKey
      - IAM
    MinLength: 1

  CDFSecurityGroupId:
    Description: ID of an existing CDF security group to deploy the API into. Only required if AuthType = 'Private'.
    Type: String

  CognitoUserPoolArn:
    Description: Cognito user pool arn.  Only required if AuthType is set to 'Cognito'.
    Type: String
    Default: 'N/A'

  EnableApiGatewayAccessLogs:
    Description: Enables API gateway Access Logging, defaults to true if not specified.
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    MinLength: 1

  Environment:
    Description:  Name of environment.  Used to name the created resources.
    Type: String
    MinLength: 1

  CommandsFunctionName:
    Description: CDF Core Commands Service API Function Name
    Type: String
    MinLength: 1

  IotEndpoint:
    Description: Iot Endpoint Address
    Type: String

  PrivateSubnetIds:
    Description: Comma delimited list of private subnetIds to deploy the API into. Only required if AuthType = 'Private'.
    Type: CommaDelimitedList

  ProvisioningFunctionName:
    Description: CDF Core Provisioning Service API Function Name
    Type: String
    MinLength: 1

  TemplateSnippetS3UriBase:
    Description: |
      S3 uri of directory where template snippets are stored for the account.
    Type: String
    MinLength: 1

  VehicleActivationTopic:
    Description: The topic that a TCU publishes its vehicle information when first installed.
    Default: dt/+/vehicle
    Type: String
    MinLength: 1

  VpcId:
    Description: ID of VPC to deploy the API into. Only required if AuthType = 'Private'.
    Type: String

Conditions:
  DeployInVPC: !Not [ !Equals [ !Ref VpcId, 'N/A' ] ]
  EnableApiGatewayAccessLogs: !Equals [ !Ref EnableApiGatewayAccessLogs, "true" ]

Resources:

  ApiGatewayApi:
    'Fn::Transform':
      Name: 'AWS::Include'
      Parameters:
        Location: !Sub "${TemplateSnippetS3UriBase}${ApiGatewayDefinitionTemplate}"
    DependsOn:
      - LambdaFunction

  ApiGatewayAccessLogGroup:
    Condition: EnableApiGatewayAccessLogs
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub 'cms-facade-apigatewayaccesslogs-${Environment}'

  ApplicationPolicies:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'cdf-facade-auto application policies'
      Path: "/cdf/facade/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "iot:Publish"
            Effect: Allow
            Resource: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/cdf/*"
          - Sid: lambda
            Action:
              - lambda:InvokeFunction
              - lambda:Invoke
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AssetLibraryFunctionName}'
              - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CommandsFunctionName}'
              - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProvisioningFunctionName}'
          - Action:
              - "iot:Publish"
            Effect: Allow
            Resource: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/cdf/*"

  VehicleActivationTopicRule:
    Type: "AWS::IoT::TopicRule"
    Properties:
      TopicRulePayload: 
        Actions:
          -
            Lambda:
              FunctionArn: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${EventsLambdaFunction}'
        Description: "Integrates the CDF Facade (Auto) with IoT Core."
        AwsIotSqlVersion: "2016-03-23"
        RuleDisabled: "false" 
        Sql: !Sub "SELECT topic(2) as deviceId, * FROM '${VehicleActivationTopic}'"

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../bundle.zip
      Handler: api_gateway_proxy.handler
      MemorySize: 256
      Role: !GetAtt RESTLambdaFunctionRole.Arn
      Runtime: nodejs12.x
      Timeout: 30
      Environment:
        Variables:
          NODE_CONFIG_DIR: './config'
          NODE_CONFIG: !Ref ApplicationConfigurationOverride
          FACADE_ASSETLIBRARY_APIFUNCTIONNAME: !Ref AssetLibraryFunctionName
          FACADE_PROVISIONING_APIFUNCTIONNAME: !Ref ProvisioningFunctionName
          FACADE_COMMANDS_APIFUNCTIONNAME: !Ref CommandsFunctionName
          FACADE_AWS_IOT_ENDPOINT: !Ref IotEndpoint
      Tracing: Active
      VpcConfig:
        Fn::If:
          - DeployInVPC
          - SubnetIds: !Ref PrivateSubnetIds
            SecurityGroupIds:
              - !Ref CDFSecurityGroupId
          - Ref: AWS::NoValue
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY

  RESTLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Ref ApplicationPolicies
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  EventsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../bundle.zip
      Handler: iot_core_proxy.handler
      MemorySize: 256
      Role: !GetAtt EventsLambdaFunctionRole.Arn
      Runtime: nodejs12.x
      Timeout: 30
      Environment:
        Variables:
          NODE_CONFIG_DIR: './config'
          NODE_CONFIG: !Ref ApplicationConfigurationOverride
          FACADE_ASSETLIBRARY_APIFUNCTIONNAME: !Ref AssetLibraryFunctionName
          FACADE_PROVISIONING_APIFUNCTIONNAME: !Ref ProvisioningFunctionName
          FACADE_COMMANDS_APIFUNCTIONNAME: !Ref CommandsFunctionName
          FACADE_AWS_IOT_ENDPOINT: !Ref IotEndpoint
      Tracing: Active

  EventsLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Ref ApplicationPolicies
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess



Outputs:
  ApiGatewayHost:
    Description: Host for application
    Value: !Sub '${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com'
  ApiGatewayUrl:
    Description: URL for application
    Value: !Sub 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub "https://{AWS::Region}.console.aws.amazon.com/lambda/home?region={AWS::Region}#/functions/{LambdaFunction}"
  RestApiFunctionName:
    Description: Lambda function name
    Value: !Ref LambdaFunction


